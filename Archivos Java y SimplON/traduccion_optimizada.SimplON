%%%%% Traducción de A.java, B.java, C.java y Principal.java.

%%%---------------------------Creación de VTs------------------------------------------
%%% Carga la VT de la clase A
        SetLabel VTA, Libre                                     %Creo la etiqueta para la VT de A
        SetD Libre, initA            @VTA: direccion de initA   %Pongo en la VTA la direccion la version de init que usa A
        SetD Libre+1, m1A            @VTA: dirección de m1A     %Pongo en la VTA la dirección de la versión de m1 que usa A
        SetD Libre+2, m2A            @VTA: dirección de m2A     %Pongo en la VTA la dirección de la versión de m2 que usa A
        SetLibre Libre+3                                        %Actualizo el registro libre según el tamaño de la VTA

%%% Carga la VT de la clase B
        SetLabel VTB, Libre                                    %Creo la etiqueta para la VT de B
        SetD Libre, initB           @VTB: dirección de initB   %Pongo en la VTB la dirección de la versión de init que usa B(respetando el offset del init de A ya que estamos redefiniendo)
        SetD Libre+1, m1A           @VTB: dirección de m1A     %Pongo en la VTB la dirección de la versión de m1 que se hereda de A
        SetD Libre+2, m2A           @VTB: dirección de m2A     %Pongo en la VTB la dirección de la versión de m2 que se hereda de A
        SetD Libre+3, m2B           @VTB: dirección de m2B     %Pongo en la VTB la dirección de la versión de m2 que se sobrecarga en B
        SetLibre libre+4                                       %Actualizo el registro libre según el tamaño de la VTB

%%% Carga la VT de la clase C
        SetLabel VTC, Libre                                     %Creo la etiqueta para la VT de C
        SetD Libre, initC            @VTC: dirección de initC   %Pongo en la VTC la dirección de la versión de init que usa C(respetando el offset del init de B ya que estamos redefiniendo)
        SetD Libre+1, m1C            @VTC: dirección de m1C     %Pongo en la VTC la direccion de la version de m1 que usa C(respetando el offset del m1 de A ya que estamos redefiniendo)
        SetD Libre+2, m2A            @VTC: dirección de m2A     %Pongo en la VTC la direccion de la version de m2 que se hereda de A
        SetD Libre+3, m2B            @VTC: dirección de m2B     %Pongo en la VTC la direccion de la version de m2 que se hereda de B
        SetLibre libre+4                                        %Actualizo el registro libre según el tamaño de la VTC


%%% Carga la VT de la clase Principal

%
%Como no tiene métodos, no le hacemos virtual table.
%

%%%------------------------------------------------------------------------------------
%%%----------------------Código de inicialización (llamada a Main)---------------------
%%% Llama a Main y finaliza

        SetD Libre, pc+4            @PTR    %Guardo puntero de retorno luego de la ejecución del codigo de main que me lleva a la instruccion Halt
        SetD Libre+1, actual        @ED     %Guardo enlace dinamico %main es estatico asi que no tien this!                                    
        SetActual Libre                     %Muevo actual para que apunte al RA activo, que acabo de crear para main
        Jump Main                           %Salto al codigo de main
        Halt                                %Cuando termino de ejecutar main finalizo

%%%------------------------------------------------------------------------------------
%%%---------------------------Traducción de init de la clase A-------------------------
initA   
        SetLibre Actual+3                                %Muevo libre segun el tamaño del RA de initA()
        %Traduccion de v1 = 3
        SetH D[Actual+2]+1, 3      @v1 = 3               %Guardo el valor 3 en la variable de instancia v1
        %Traduccion de v2 = 6
        SetH D[Actual+2]+2, 6      @v2 = 6               %Guardo el valor 6 en la variable de instancia v2

        %Regreso al RA de la unidad llamadora   
        SetLibre Actual                                  %Limpio la memoria del RA de initB
        SetActual D[Libre+1]                             %Muevo actual a donde tenia el enlace dinamico
        Jump D[Libre]                                    %Salto a la direccion de codigo que guarde en el puntero de retorno

%%%%--------------------------Traducción de init de la clase B--------------------------
initB   
        SetLibre Actual+3                               %Muevo libre segun el tamaño del RA de initB()
        %Traduccion de super.init(); De la clase B
        SetD Libre, PC+5                @PTR            %Guardo el puntero de retorno para volver de initA
        SetD Libre+1, Actual            @ED             %Guardo enlace dinamico para al volver apuntar al RA de initB
        setD Libre+2, D[Actual+2]       @This           %Guardo this que en este caso es el objeto que invoco a initB
        setactual Libre                                 %Muevo actual para que apunte al RA que acabo de crear para initA
        Jump initA                                      %Salto al codigo de initA por su etiqueta, ya que super me permite saber siempre a cual metodo me refiero

        %Traduccion de v1 = v1*5;
        SetH D[Actual+2]+1, H[D[Actual+2]+1] * 5   @v1 = v1 * 5    %Multiplico el valor de v1 por 5 y lo guardo en v1
        %Traduccion de v2 = v2*5;
        SetH D[Actual+2]+2, H[D[Actual+2]+2] * 5   @v2 = v2 * 5    %Multiplico el valor de v2 por 5 y lo guardo en v2
        %Traduccion max = 4;
        SetH D[Actual+2]+3, 4                      @max = 4        %Guardo el valor 4 en la variable de instancia max
        
        %Volviendo al RA llamador
        SetLibre Actual                                         %Limpio la memoria del RA de initB
        SetActual D[Libre+1]                                    %Muevo actual a donde tenia el enlace dinamico
        Jump D[Libre]                                           %Salto a la direccion de codigo que guarde en el puntero de retorno



%%%---------------------------Traduccion de init de la clase C--------------------------
initC   
        SetLibre Actual+3                                       %Muevo libre segun el tamaño del RA de initC
        %Traduccion de super.init(); De la clase C
        SetD Libre, PC+5                @PTR                    %Guardo el puntero de retorno para volver de init() de B
        SetD Libre+1, Actual            @ED                     %Guardo enlace dinamico para al volver apuntar al RA de initC
        SetD Libre+2, D[Actual+2]       @This                   %Guardo this que en este caso es el objeto que invoco a initC
        SetActual Libre                                         %Muevo actual para que apunte al RA que acabo de crear para init() de B                                       
        Jump initB                                              %Salto al codigo de initB por su etiqueta, ya que super me permite saber siempre a cual metodo me refiero

        %Traduccion de la instruccion v3 = new B();
        %Creamos el OBJ B y lo guardamos en v3
        SetH D[Actual+2]+4, PO               @v3 = new B()            %Guardo en v3 una ref al objeto B.
        SetH PO, VTB                         @VTB                     %Armo la Inst de B en heap.
        SetPO PO+4                                                    %Incremento el PO segun el tamano de objeto que cree

        %Traduccion de la instruccion v3.init();        
        SetD Libre, PC+5                        @PTR                  %Guardo el puntero de retorno para volver de init()
        SetD Libre+1, Actual                    @ED                   %Guardo enlace dinamico para al volver apuntar al RA de main
        SetD Libre+2, H[D[Actual+2]+4]          @This                 %Guardo this que en este caso es el objeto referenciado por v3
        SetActual Libre                                               %Muevo actual para que apunte al RA que acabo de crear para init()
        Jump D[H[D[Actual+2]+0]+0]                                    %Salto al codigo de init() segun la VT del objeto receptor (el this del RA que acabo de crear)

        %Volviendo al RA llamador
        SetLibre Actual                                               %Limpio la memoria del RA de initC
        SetActual D[Libre+1]                                          %Muevo actual a donde tenia el enlace dinamico
        Jump D[Libre]                                                 %Salto a la direccion de codigo que guarde en el puntero de retorno

%%%---------------------------Traducción de m1 de la clase A---------------------------
m1A     
        SetLibre Actual+4                                %Muevo libre segun el tamaño del RA de m1A() considerando variables locales
        %Traduccion int i = 0;
        SetD Actual+3, 0                @i = 0           %Guardo el valor 0 en la variable de instancia i
        
        %Traduccion del while
        Jump m1AwhileEnd                                 %Salto a la condición del while
        m1AwhileBegin    
            %inicio del ciclo while
            %Traduccion de i = i+1;
            SetD Actual+3, D[Actual+3]+1    @i = i + 1   %Accedo al valor de i, lo incremento en 1 y lo guardo en i
            %Traduccion de v1 = ((v1-i)*v2)/i;
            SetH D[Actual+2]+1, (((H[D[Actual+2]+1]-D[Actual+3]) * H[D[Actual+2]+2])) / D[Actual+3]  @v1=((v1-i)*v2)/i %Utilizo los valores de v1, v2 y de i para calcular la expresión y lo guardo en v1

            %Traduccion de if(v1+v2+i > v2*i)
            JumpT m1AwhileEnd, ( (H[D[Actual+2]+1]) + (H[D[Actual+2]+2]) + (D[Actual+3]) ) > ( (H[D[Actual+2]+2]) * (D[Actual+3]) ) %Si la condición es verdadera, vuelvo al comienzo del while y evalúo la condición de bucle
            %Traduccion v2 = ((v2+3)*(5+i))/i;
            SetH D[actual+2]+2, (((H[D[actual+2]+2]) + 3) * (5+(D[actual+3]))) / D[actual+3]  @v2=((v2+3)*(5+i))/i  %Utilizo los valores de v2 e i para calcular la expresion y lo guardo en v2
            %Traduccion condicion del while
        m1AwhileEnd
        JumpT m1AwhileBegin, ((H[D[Actual+2]+2] > H[D[Actual+2]+1]) | (H[D[Actual+2]+1]+H[D[Actual+2]+2] >= 5)) & (D[Actual+3]<50) %Si la condicion es verdadera, salto hacia atras al comienzo del cuerpo del while. Si es falsa, sigo con la instr siguiente
        
        %Fin del while
        SetLibre Actual                              %Limpio la memoria del RA de m1A
        SetActual D[Libre+1]                         %Muevo actual a donde tenia el enlace dinamico
        Jump D[Libre]                                %Salto a la direccion de codigo que guarde en el puntero de retorno


%%%---------------------------Traducción de m2 de la clase A---------------------------
m2A     
        SetLibre Actual+5                                                   %Muevo libre segun el tamaño del RA de m2A() considerando parámetros formales
        %Traduccion v1 = v1+x;
        SetH D[Actual+2]+1, H[D[Actual+2]+1] + D[Actual+3]  @v1=v1+x        %Uso this para obtener el valor de v1, obtengo el valor del param x, lo sumo y lo guardo en v1
        %Traduccion v2 = v2+y;
        SetH D[actual+2]+2, H[D[Actual+2]+2] + D[Actual+4]  @v2=v2+y        %Uso this para obtener el valor de v2, obtengo el valor del param x, lo sumo y lo guardo en v1
        
        %Traduccion de la instruccion this.m1() en m2A
        SetD Libre, pc+5                   @PTR                             %Guardo el puntero de retorno para volver de m1()
        SetD Libre+1, Actual               @ED                              %Guardo enlace dinamico para al volver apuntar al RA de m2A
        SetD Libre+2, D[Actual+2]          @this                            %Guardo this que en este caso es el objeto que invoco a m2A
        SetActual Libre                                                     %Muevo actual para que apunte al RA que acabo de crear para m1()
        Jump D[H[D[Actual+2]+0]+1]                                          %Salto al codigo de m1() segun la VT del objeto receptor (el this del RA que acabo de crear)
        
        SetD Actual-1, H[D[Actual+2]+1] +  H[D[Actual+2]+2] @return v1+v2   %Sumo los valores de v1 y v2 y guardo el resultado en el espacio que reserve para el retorno

        SetLibre Actual                                                     %Limpio la memoria del RA de m2A
        SetActual D[Libre+1]                                                %Muevo actual a donde tenia el enlace dinamico
        Jump D[Libre]                                                       %Salto a la direccion de codigo que guarde en el puntero de retorno

%%%-------------------------Traducción de m1 de la clase C-------------------------------
m1C      
        SetLibre Actual+3                                               %Muevo libre segun el tamaño del RA de m1C()
        %Traduccion super.m1()
        SetD Libre, PC+5                        @PTR                    %Guardo el puntero de retorno para volver de m1() (m1 de B)
        SetD Libre+1, Actual                    @ED                     %Guardo enlace dinamico para al volver apuntar al RA de m1C
        SetD Libre+2, D[Actual+2]               @This                   %Guardo this que en este caso es el objeto que invoco a m1C
        SetActual Libre                                                 %Muevo actual para que apunte al RA que acabo de crear para m1() de B
        Jump m1A                                                        %Salto al codigo m1A        

        %Traduccion v1 = v1+this.m2(5+v3.m2(v1,v2));

        SetLibre Libre+1                                                %Dejo espacio para el valor de v1
        SetD Libre-1, H[D[Actual+2]+1]                                  %Guardamos el valor de v1 por si es modificado por las llamadas siguientes

        %Traduccion v3.m2(v1,v2);
        SetLibre Libre+1                        @lugar retorno          %Dejo espacio para el valor de retorno de v3.m2()
        SetD Libre, PC+7                        @PTR                    %Guardo el puntero de retorno para volver de v3.m2()
        SetD Libre+1, Actual                    @ED                     %Guardo enlace dinamico para al volver apuntar al RA de m1C
        SetD Libre+2, H[D[Actual+2]+4]          @This                   %Guardo this que en este caso es el objeto que invoco a m1C
        SetD Libre+3, H[D[Actual+2]+1]          @param x                %Paso por parametro v1
        SetD Libre+4, H[D[Actual+2]+2]          @param y                %Paso por parametro v2
        SetActual Libre                                                 %Muevo actual para que apunte al RA que acabo de crear para m2
        Jump D[H[D[Actual+2]+0]+2]                                      %Salto al codigo de m2 según la VT del objeto receptor (el this del RA que acabo de crear)

        %Le sumo 5 al resultado parcial de v3.m2(v1,v2)
        SetD Libre-1, (D[Libre-1]) + 5                                  %Incremento en 5 el valor que obtuve de la llamada a m2(int, int)

        %this.m2(int)
        SetLibre Libre+1                        @lugar retorno          %Dejo espacio para el valor de retorno de this.m2()
        SetD Libre, pc+6                        @PTR                    %Guardo el puntero de retorno para volver de this.m2()
        SetD Libre+1, Actual                    @ED                     %Guardo enlace dinamico para al volver apuntar al RA de m1C
        SetD Libre+2, D[Actual+2]               @This                   %Guardo this que en este caso es el objeto que invoco a m1C
        SetD Libre+3, D[Libre-2]                @param x                %Paso por parametro el valor 5+v3.m2(v1,v2) obtenido anteriormente
        SetActual Libre                                                 %Muevo actual para que apunte al RA que acabo de crear para this.m2
        Jump D[H[D[Actual+2]+0]+3]                                      %Salto al codigo de this.m2 segun la VT del objeto receptor (el this del RA que acabo de crear)

        %Traduccion v1+this... lo calculado por partes anteriormente.
        SetH D[Actual+2]+1, D[Libre-3] + D[Libre-1]   @v1 = v1 + this.m2(...)   %Guardo el valor de la suma entre v1 y el valor que retorno la llamada a this.m2() en v1

        %Volviendo al RA llamador
        SetLibre Actual                                                         %Limpio la memoria del RA de m1C
        SetActual D[Libre+1]                                                    %Muevo actual a donde tenia el enlace dinamico
        Jump D[Libre]                                                           %Salto a la direccion de codigo que guarde en el puntero de retorno

%%%--------------------------Traducción de m2 de la clase B----------------------------
m2B     
        SetLibre Actual+4                                                    %Muevo libre segun el tamaño del RA de m2B() teniendo en cuenta parametros formales
        %Traduccion if(x < 10 | max == 1).
        JumpT m2BendIf, !( ((D[actual+3])<10) | ((H[D[actual+2]+3]) == 1) )  %if(x < 10 | max == 1): si es verdadero no salto, sino salto a la etiqueta m2BendIf
            %Traduccion super.m1();
            SetD Libre, PC+5                        @PTR                     %Guardo el puntero de retorno para volver de super.m1 (m1 de A)
            SetD Libre+1, Actual                    @ED                      %Guardo enlace dinamico para al volver apuntar al RA de m2B
            SetD Libre+2, D[Actual+2]               @This                    %Guardo this que en este caso es el objeto que invocó a m2B
            SetActual Libre                                                  %Muevo actual para que apunte al RA que acabo de crear para m1() de A
            Jump m1A                                                         %Salto al código de m1 del padre de B (m1A)
            
            %Traduccion max = 4;
            SetH D[Actual+2]+3 , 4                 @max = 4                  %Guardo el valor 4 en la variable de instancia max
            
            %Traduccion return v1+(v2-x)
            SetD Actual-1, (H[D[Actual+2]+1]) + ((H[D[Actual+2]+2]) - D[Actual+3])  @return v1+(v2-x)  %Uso this del RA para acceder a los valores de v1 y v2, y guardo el resultado de la operacion en el espacio reservado para el retorno
            Jump m2Bret                                                                                %Salto a la etiqueta donde está el código para hacer el retorno del método.

        
m2BendIf
        %Traduccion max = max -1 
        SetH D[Actual+2]+3, (H[D[Actual+2]+3]) - 1        @max = max - 1            %Uso this del RA para acceder a la variable de instancia max, tanto para usar su valor como para luego asignarle otro.

        %Traduccion return this.m2(x/10)
        SetLibre Libre+1                        @lugar retorno          %Como m2() devuelve algo reservo lugar para ese valor
        SetD Libre, PC+6                        @PTR                    %Guardo el puntero de retorno para volver de m2()
        SetD Libre+1, Actual                    @ED                     %Guardo el enlace dinamico para al volver apuntar al RA de m2B
        SetD Libre+2, D[Actual+2]               @This                   %Guardo this que en este caso es el objeto que invocó a m2() de B
        SetD Libre+3, (D[Actual+3])/10          @param x                %Paso por parametro x/10
        SetActual Libre                                                 %Muevo actual para que apunte al RA que acabo de crear para m2()
        Jump D[H[D[Actual+2]+0]+3]                                      %Salto al código de m2 según la VT del objeto receptor (el this del RA que acabo de crear)

        %Seteando el valor de retorno
        SetD Actual-1, D[Libre-1]               @return this.m2(x/10)   %Guardo en el espacio que reservé (i.e: actual-1) para el valor de retorno de m2B el valor que obtuve de la reciente llamada a m2() (que está en Libre-1)
        
        %Volviendo al RA llamador
m2Bret        
        SetLibre Actual                                                 %Limpio la memoria del RA de m2B
        SetActual D[Libre+1]                                            %Muevo actual a donde tenia el enlace dinamico
        Jump D[Libre]                                                   %Salto a la direccion de codigo que guarde en el puntero de retorno

%%%---------------------------Traducción de m2 de la clase main---------------------------  
%%%------------------------Traducción de main de la clase Principal--------------------
Main      
        SetLibre Actual+5                                         %Muevo libre segun el tamaño del RA de main() considerando variables locales

        % Creamos el OBJ C y lo guardamos en oA
        SetD actual+2, PO               @oA = new C()             %Guardo en oA una ref al objeto C.
        SetH PO, VTC                    @VTC                      %Le agrego la VT al nuevo objeto 
        SetPO PO+5                                                %Incremento el PO segun el tamano de objeto que cree
        
        % Traduccion llamada oA.init()
        SetD Libre, PC+5                @PTR RI oA.init()         %Guardo el puntero de retorno para volver de init()
        SetD Libre+1, Actual            @ED                       %Guardo enlace dinamico para al volver apuntar al RA de main      
        SetD Libre+2, D[Actual+2]       @This                     %Guardo this que en este caso es el objeto referenciado por oA
        SetActual Libre                                           %Muevo actual para que apunte al RA que acabo de crear para init()
        Jump D[H[D[Actual+2]+0]+0]                                %Salto al codigo de init() segun la VT del objeto receptor (el this del RA que acabo de crear)

        % Traduccion read para x1, y para x2.
        setIn Actual+3                  @x1=read()                %Leo el valor por pantalla y lo guardo en x1
        setIn Actual+4                  @x2=read()                %Leo el valor por pantalla y lo guardo en x2
        
        
        % Traduccion oA.m2(x1,x2)
        SetLibre Libre+1                @lugar retorno            %Dejo espacio para el valor de retorno de m2()
        SetD Libre, PC+7                @PTR                      %Guardo el puntero de retorno para volver de m2()
        SetD Libre+1, Actual            @ED                       %Guardo el enlace dinamico para al volver apuntar al RA de main
        SetD Libre+2, D[Actual+2]       @This                     %Guardo this que en este caso es el objeto referenciado por oA
        SetD Libre+3, D[Actual+3]       @param x                  %Paso por parametro x1
        SetD Libre+4, D[Actual+4]       @param y                  %Paso por parametro x2
        SetActual Libre                                           %Muevo actual para que apunte al RA que acabo de crear para m2()
        Jump D[H[D[Actual+2]+0]+2]                                %Salto al codigo de m2() segun la VT del objeto receptor (el this del RA que acabo de crear)

        %Traduccion del Sistema.print
        SetOut D[Libre-1]                                         %Muestro por pantalla el valor que retorna m2 que esta en el lugar que reserve para el retorno

        % Retorno de Main
        SetLibre Actual                                           %Limpio la memoria del RA de main
        SetActual D[Libre+1]                                      %Muevo Actual a donde tenia el enlace dinamico
        Jump D[Libre]                                             %Salto a la direccion de codigo que guarde en el puntero de retorno